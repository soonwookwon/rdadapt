res <- list(ht = ht, hc = hc)
return(res)
}
#' Estimator for adaptive CI
#'
#' Calculates \eqn{\hat{L}_j(\delta)} in the paper
#'
#' @param delta a nonegative scalar value:
#' it can be left unspecified if `ht` and `hc` are specified
#' @param ht the modulus value for the treated observations:
#' it can be left unspecified if `delta` is specified
#' @param hc the modulus value for the control observations:
#' it can be left unspecified if `delta` is specified
#' @param Cj the smoothness parameter aiming to adapt to
#' @param Cbar the largest smoothness parameter
#' @param Xt data for the treated
#' @param Xc data for the control
#' @param mon_ind index for monotone variables
#' @param sigma_t standard deviation for the treated group observations
#' @param sigma_c standard deviation for the control group observations
#' @param Yt outcome value for the treated group observations
#' @param Yc outcome value for the control group observations
#'
#' @return a scalar value of the estimator
#' @export
#'
#' @examples
Lhat_fun_RD <- function(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind,
sigma_t, sigma_c, Yt, Yc) {
if(missing(ht) | missing(hc)){
hres <- bw_adpt(delta, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
ht <- hres$ht
hc <- hres$hc
}
num_it <- K_fun(b = ht, gam_pair = c(1, 1), C_pair = c(Cbar, Cj), Xt, mon_ind) * Yt / sigma_t
denom_it <- K_fun(b = ht, gam_pair = c(1, 1), C_pair = c(Cbar, Cj), Xt, mon_ind) / sigma_t
res_t <- sum(num_it) / sum(denom_it)
num_ic <- K_fun(b = hc, gam_pair = c(1, 1), C_pair = c(Cj, Cbar), Xc, mon_ind) * Yc / sigma_c
denom_ic <- K_fun(b = hc, gam_pair = c(1, 1), C_pair = c(Cj, Cbar), Xc, mon_ind) / sigma_c
res_c <- sum(num_ic) / sum(denom_ic)
return(res_t - res_c)
}
#' Calculates the bandwidths h_jt and h_jc
#'
#' @param delta a nonnegative scalar
#' @param Cj the smoothness parameter aiming to adapt to
#' @param Cbar the largest smoothness parameter
#' @param Xt data for the treated
#' @param Xc data for the control
#' @param mon_ind index for monotone variables
#' @param sigma_t standard deviation for the treated group observations
#' @param sigma_c standard deviation for the control group observations
#'
#' @return a list of two values, h_jt and h_jc
#' @export
#'
#' @examples
bw_adpt <- function(delta, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c){
C_pair = c(Cbar, Cj)
modres <- modsol_RD(delta, gam_pair = c(1, 1), C_pair, Xt, Xc, mon_ind,
sigma_t, sigma_c, swap = FALSE)
ht <- modres$bt
hc <- modres$bc
res <- list(ht = ht, hc = hc)
return(res)
}
#' Estimator for adaptive CI
#'
#' Calculates \eqn{\hat{L}_j(\delta)} in the paper
#'
#' @param delta a nonegative scalar value:
#' it can be left unspecified if `ht` and `hc` are specified
#' @param ht the modulus value for the treated observations:
#' it can be left unspecified if `delta` is specified
#' @param hc the modulus value for the control observations:
#' it can be left unspecified if `delta` is specified
#' @param Cj the smoothness parameter aiming to adapt to
#' @param Cbar the largest smoothness parameter
#' @param Xt data for the treated
#' @param Xc data for the control
#' @param mon_ind index for monotone variables
#' @param sigma_t standard deviation for the treated group observations
#' @param sigma_c standard deviation for the control group observations
#' @param Yt outcome value for the treated group observations
#' @param Yc outcome value for the control group observations
#'
#' @return a scalar value of the estimator
#' @export
#'
#' @examples
Lhat_fun_RD <- function(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind,
sigma_t, sigma_c, Yt, Yc) {
if(missing(ht) | missing(hc)){
hres <- bw_adpt(delta, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
ht <- hres$ht
hc <- hres$hc
}
num_it <- K_fun(b = ht, gam_pair = c(1, 1), C_pair = c(Cbar, Cj), Xt, mon_ind) * Yt / sigma_t
denom_it <- K_fun(b = ht, gam_pair = c(1, 1), C_pair = c(Cbar, Cj), Xt, mon_ind) / sigma_t
res_t <- sum(num_it) / sum(denom_it)
num_ic <- K_fun(b = hc, gam_pair = c(1, 1), C_pair = c(Cj, Cbar), Xc, mon_ind) * Yc / sigma_c
denom_ic <- K_fun(b = hc, gam_pair = c(1, 1), C_pair = c(Cj, Cbar), Xc, mon_ind) / sigma_c
res_c <- sum(num_ic) / sum(denom_ic)
return(res_t - res_c)
}
# Design
n <- 500
d <- 2
X <- matrix(rnorm(n * d), nrow = n, ncol = d)
tind <- X[, 1] > 0 & X[, 2] > 0
Xt <- X[tind == 1, ,drop = F]
Xc <- X[tind == 0, ,drop = F]
gam_pair <- c(1, 1)
C_pair <- c(0.1, 0.2)
mon_ind <- c(1, 2)
sigma_t <- 1
sigma_c <- 1
# Heteroskedasticity
sigma <- rnorm(n)^2
sigma_t <- sigma[tind == 1]
sigma_c <- sigma[tind == 0]
delta = 1.95
bw_adpt(delta = delta, Cj = 1/2, Cbar = 1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
Yt = 1 + rnorm(legnth(sigma_t), mean = 0, sd = sigma_t)
Yt = 1 + rnorm(length(sigma_t), mean = 0, sd = sigma_t)
Yc = rnorm(length(sigma_c), mean = 0, sd = sigma_c)
Lhat_fun_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc)
Lhat_fun <- function(b, gamma, C, X, mon_ind, sigma, Y, swap = FALSE) {
if (swap) {
gamma <- gamma[2:1]
C <- C[2:1]
}
f1 <- C[1] * Norm(Vplus(X, mon_ind))^gamma[1]
f2 <- pmax(b - C[2] * Norm(Vminus(X, mon_ind))^gamma[2], f1)
return(.5 * b + sum((f2 - f1) * (Y - .5 * (f1 + f2)) / sigma^2) /
sum((f2 - f1) / sigma^2))
}
bw_adpt(delta = delta, Cj = 1/2, Cbar = 1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
bwres = bw_adpt(delta = delta, Cj = 1/2, Cbar = 1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
bt = bwres$ht
bc = bwres$hc
Cj = 1/2
Cbar = 1
Lt <- Lhat_fun(bt, gamma = c(1,1), C = c(Cbar, Cj), Xt, mon_ind, sigma_t, Yt, swap = FALSE)
Lc <- Lhat_fun(bc, gamma = c(1,1), C = c(Cj, Cbar), Xc, mon_ind, sigma_c, Yc, swap = FALSE)
Lt - Lc
Lhat_fun_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc)
?K_fun
a_fun <- function(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c){
if(missing(ht) | missing(hc)){
hres <- bw_adpt(delta, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
ht <- hres$ht
hc <- hres$hc
}
num_it1 <- K_fun(b = ht, C_pair = c(Cbar, Cj), X = Xt, mon_ind = mon_ind) / sigma_t
num_it2 <- Cj * Norm(Vplus(Xt, mon_ind)) - Cbar * Norm(Vminus(Xt, mon_ind))
num_it <- num_it1 * num_it2
denom_it <- K_fun(b = ht, C_pair = c(Cbar, Cj), X = Xt, mon_ind = mon_ind) / sigma_t
res_t <- sum(num_it) / sum(denom_it)
num_ic1 <- K_fun(b = hc, C_pair = c(Cj, Cbar), X = Xc, mon_ind = mon_ind) / sigma_c
num_ic2 <- Cbar * Norm(Vplus(Xc, mon_ind)) - Cj * Norm(Vminus(Xc, mon_ind))
num_ic <- num_ic1 * num_ic2
denom_ic <- K_fun(b = hc, gam_pair = c(1, 1), C_pair = c(Cj, Cbar), Xc, mon_ind) / sigma_c
res_c <- sum(num_ic) / sum(denom_ic)
res <- 0.5 * (res_t - res_c)
return(res)
}
a_fun(delta = delta, Cj = 1/2, Cbar = 1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
Lres <- Lhat_fun_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc)
ares <- a_fun(delta = delta, Cj = 1/2, Cbar = 1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
Lres - ares
Lres <- Lhat_fun_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc)
ares <- a_fun(delta = delta, Cj = 1/2, Cbar = 1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
Lres - ares
Lt - Lc
Lt
Lc
bt
# Lt part debug
f1 <- Cbar * Norm(Vplus(X, mon_ind))
f2 <- pmax(bt - Cj * Norm(Vminus(X, mon_ind)), f1)
f2 - f1
# Lt part debug
f1 <- Cbar * Norm(Vplus(Xt, mon_ind))
f2 <- pmax(bt - Cj * Norm(Vminus(Xt, mon_ind)), f1)
f2 - f1
bt * K_fun(b = bt, gam_pair = c(1, 1), C_pair = c(Cbar, Cj), Xt, mon_ind)
a_fun <- function(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c){
if(missing(ht) | missing(hc)){
hres <- bw_adpt(delta, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
ht <- hres$ht
hc <- hres$hc
}
num_it1 <- K_fun(b = ht, C_pair = c(Cbar, Cj), X = Xt, mon_ind = mon_ind) / sigma_t
num_it2 <- Cbar * Norm(Vplus(Xt, mon_ind)) - Cj * Norm(Vminus(Xt, mon_ind))
num_it <- num_it1 * num_it2
denom_it <- K_fun(b = ht, C_pair = c(Cbar, Cj), X = Xt, mon_ind = mon_ind) / sigma_t
res_t <- sum(num_it) / sum(denom_it)
num_ic1 <- K_fun(b = hc, C_pair = c(Cj, Cbar), X = Xc, mon_ind = mon_ind) / sigma_c
num_ic2 <- Cj * Norm(Vplus(Xc, mon_ind)) - Cbar * Norm(Vminus(Xc, mon_ind))
num_ic <- num_ic1 * num_ic2
denom_ic <- K_fun(b = hc, gam_pair = c(1, 1), C_pair = c(Cj, Cbar), Xc, mon_ind) / sigma_c
res_c <- sum(num_ic) / sum(denom_ic)
res <- 0.5 * (res_t - res_c)
return(res)
}
ares <- a_fun(delta = delta, Cj = 1/2, Cbar = 1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
Lres - ares
(f2 - f1) * (f2 + f1)
bt * K_fun(b = bt, gam_pair = c(1, 1), C_pair = c(Cbar, Cj), Xt, mon_ind) *
(bt + Cbar * Norm(Vplus(Xt, mon_ind)) - Cj * Norm(Vminus(Xt, mon_ind)))
#' @param mon_ind index for monotone variables
#' @param sigma_t standard deviation for the treated group observations
#' @param sigma_c standard deviation for the control group observations
#' @param Yt outcome value for the treated group observations
#' @param Yc outcome value for the control group observations
#'
#' @return a scalar value of the estimator
#' @export
#'
#' @examples
Lhat_fun_RD <- function(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind,
sigma_t, sigma_c, Yt, Yc) {
if(missing(ht) | missing(hc)){
hres <- bw_adpt(delta, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
ht <- hres$ht
hc <- hres$hc
}
num_it <- K_fun(b = ht, gam_pair = c(1, 1), C_pair = c(Cbar, Cj), Xt, mon_ind) * Yt / sigma_t^2
denom_it <- K_fun(b = ht, gam_pair = c(1, 1), C_pair = c(Cbar, Cj), Xt, mon_ind) / sigma_t^2
res_t <- sum(num_it) / sum(denom_it)
num_ic <- K_fun(b = hc, gam_pair = c(1, 1), C_pair = c(Cj, Cbar), Xc, mon_ind) * Yc / sigma_c^2
denom_ic <- K_fun(b = hc, gam_pair = c(1, 1), C_pair = c(Cj, Cbar), Xc, mon_ind) / sigma_c^2
res_c <- sum(num_ic) / sum(denom_ic)
return(res_t - res_c)
}
a_fun <- function(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c){
if(missing(ht) | missing(hc)){
hres <- bw_adpt(delta, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
ht <- hres$ht
hc <- hres$hc
}
num_it1 <- K_fun(b = ht, C_pair = c(Cbar, Cj), X = Xt, mon_ind = mon_ind) / sigma_t^2
num_it2 <- Cbar * Norm(Vplus(Xt, mon_ind)) - Cj * Norm(Vminus(Xt, mon_ind))
num_it <- num_it1 * num_it2
denom_it <- K_fun(b = ht, C_pair = c(Cbar, Cj), X = Xt, mon_ind = mon_ind) / sigma_t^2
res_t <- sum(num_it) / sum(denom_it)
num_ic1 <- K_fun(b = hc, C_pair = c(Cj, Cbar), X = Xc, mon_ind = mon_ind) / sigma_c^2
num_ic2 <- Cj * Norm(Vplus(Xc, mon_ind)) - Cbar * Norm(Vminus(Xc, mon_ind))
num_ic <- num_ic1 * num_ic2
denom_ic <- K_fun(b = hc, gam_pair = c(1, 1), C_pair = c(Cj, Cbar), Xc, mon_ind) / sigma_c^2
res_c <- sum(num_ic) / sum(denom_ic)
res <- 0.5 * (res_t - res_c)
return(res)
}
Lres <- Lhat_fun_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc)
bt = bwres$ht
bc = bwres$hc
Lt <- Lhat_fun(bt, gamma = c(1,1), C = c(Cbar, Cj), Xt, mon_ind, sigma_t, Yt, swap = FALSE)
Lc <- Lhat_fun(bc, gamma = c(1,1), C = c(Cj, Cbar), Xc, mon_ind, sigma_c, Yc, swap = FALSE)
Lt - Lc
ares <- a_fun(delta = delta, Cj = 1/2, Cbar = 1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
Lres - ares
sup_bias_RD <- function(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind,
sigma_t, sigma_c){
if(missing(ht) | missing(hc)){
hres <- bw_adpt(delta, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
ht <- hres$ht
hc <- hres$hc
}
res1 <- 0.5 * (ht + hc)
res2 <- a_fun(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
res3 <- -0.5 * (delta^2 / ht) /
K_fun(b = ht, C_pair = c(Cbar, Cj), X = Xt, mon_ind = mon_ind) / sigma_t^2
res <- res1 + res2 + res3
return(res)
}
sup_bias_RD(delta = delta, Cj = 1/2, Cbar = 1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
sup_bias_RD <- function(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind,
sigma_t, sigma_c){
if(missing(ht) | missing(hc)){
hres <- bw_adpt(delta, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
ht <- hres$ht
hc <- hres$hc
}
res1 <- 0.5 * (ht + hc)
res2 <- a_fun(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
res3 <- -0.5 * (delta^2 / ht) /
sum(K_fun(b = ht, C_pair = c(Cbar, Cj), X = Xt, mon_ind = mon_ind) / sigma_t^2)
res <- res1 + res2 + res3
return(res)
}
sup_bias_RD(delta = delta, Cj = 1/2, Cbar = 1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
sup_Lhat_RD <- function(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind,
sigma_t, sigma_c){
if(missing(ht) | missing(hc)){
hres <- bw_adpt(delta, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
ht <- hres$ht
hc <- hres$hc
}
res1 <- 0.5 * (ht + hc)
res2 <- a_fun(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
res3 <- -0.5 * (delta^2 / ht) /
sum(K_fun(b = ht, C_pair = c(Cbar, Cj), X = Xt, mon_ind = mon_ind) / sigma_t^2)
res <- res1 + res2 + res3
return(res)
}
sup_bias_Lhat_RD <- function(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind,
sigma_t, sigma_c){
if(missing(ht) | missing(hc)){
hres <- bw_adpt(delta, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
ht <- hres$ht
hc <- hres$hc
}
res1 <- 0.5 * (ht + hc)
res2 <- a_fun(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
res3 <- -0.5 * (delta^2 / ht) /
sum(K_fun(b = ht, C_pair = c(Cbar, Cj), X = Xt, mon_ind = mon_ind) / sigma_t^2)
res <- res1 + res2 + res3
return(res)
}
sd_Lhat_RD <- function(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind,
sigma_t, sigma_c){
if(missing(ht) | missing(hc)){
hres <- bw_adpt(delta, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
ht <- hres$ht
hc <- hres$hc
}
res <- (delta^2 / ht) /
sum(K_fun(b = ht, C_pair = c(Cbar, Cj), X = Xt, mon_ind = mon_ind) / sigma_t^2)
return(res)
}
sd_Lhat_RD(delta = delta, Cj = 1/2, Cbar = 1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
qnorm(0.95)
c_hat_lower_RD <- function(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind,
sigma_t, sigma_c, Yt, Yc, tau) {
lhat <- Lhat_fun_RD(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind,
sigma_t, sigma_c, Yt, Yc)
sup_bias <- sup_bias_Lhat_RD(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind,
sigma_t, sigma_c)
sd <- sd_Lhat_RD(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind,
sigma_t, sigma_c)
res <- lhat - sup_bias - qnorm(1 - tau) * sd
return(res)
}
c_hat_lower_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc, tau = 0.05)
sd_Lhat_RD <- function(delta, ht, hc, Cj, Cbar, Xt, Xc, mon_ind,
sigma_t, sigma_c){
if(missing(ht) | missing(hc)){
hres <- bw_adpt(delta, Cj, Cbar, Xt, Xc, mon_ind, sigma_t, sigma_c)
ht <- hres$ht
hc <- hres$hc
}
res <- (delta / ht) /
sum(K_fun(b = ht, C_pair = c(Cbar, Cj), X = Xt, mon_ind = mon_ind) / sigma_t^2)
return(res)
}
sup_bias_Lhat_RD(delta = delta, Cj = 1/2, Cbar = 1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
sd_Lhat_RD(delta = delta, Cj = 1/2, Cbar = 1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
c_hat_lower_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc, tau = 0.05)
# Design
n <- 500
d <- 1
X <- matrix(rnorm(n * d), nrow = n, ncol = d)
tind <- X[, 1] < 0
Xt <- X[tind == 1, ,drop = F]
Xc <- X[tind == 0, ,drop = F]
gam_pair <- c(1, 1)
C_j <- 1/2
Cbar <- 1
mon_ind <- c(1)
sigma <- rnorm(n)^2
sigma_t <- sigma[tind == 1]
sigma_c <- sigma[tind == 0]
pmin(c(1,3),c(2,1))
Yt = C_j * Xt
Yc = 1
alpha = 0.05
delta = qnorm(1 - alpha)
c_hat_lower_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc, tau = alpha)
Yt = C_j * Xt
Yc = -1
alpha = 0.05
delta = qnorm(1 - alpha)
c_hat_lower_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc, tau = alpha)
nsim = 500
covres = numeric(nsim)
nsim = 500
covres = numeric(nsim)
for(i in 1:nsim){
Yt = C_j * Xt + rnorm(length(sigma_t), mean = 0, sd = sigma_t)
Yc = -1 + rnorm(length(sigma_c), mean = 0, sd = sigma_c)
chat = c_hat_lower_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc, tau = alpha)
covres[i] = chat < 1
print(i)
}
mean(covres)
alpha = 0.05
delta = qnorm(1 - alpha)
bwres = bw_adpt(delta = delta, Cj = C_j, Cbar = Cbar, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c)
bt = bwres$ht
nsim = 50
covres = numeric(nsim)
for(i in 1:nsim){
Yt = pmin(bt + C_j * X_t, 0) - bt +  rnorm(length(sigma_t), mean = 0, sd = sigma_t)
Yc = -1 + rnorm(length(sigma_c), mean = 0, sd = sigma_c)
chat = c_hat_lower_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc, tau = alpha)
covres[i] = chat < 1
print(i)
}
bt = bwres$ht
nsim = 50
covres = numeric(nsim)
for(i in 1:nsim){
Yt = pmin(bt + C_j * Xt, 0) - bt +  rnorm(length(sigma_t), mean = 0, sd = sigma_t)
Yc = -1 + rnorm(length(sigma_c), mean = 0, sd = sigma_c)
chat = c_hat_lower_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc, tau = alpha)
covres[i] = chat < 1
print(i)
}
mean(covres)
nsim = 500
covres = numeric(nsim)
for(i in 1:nsim){
Yt = pmin(bt + C_j * Xt, 0) - bt +  rnorm(length(sigma_t), mean = 0, sd = sigma_t)
Yc = -1 + rnorm(length(sigma_c), mean = 0, sd = sigma_c)
chat = c_hat_lower_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc, tau = alpha)
covres[i] = chat < 1
print(i)
}
mean(covres)
plot(Xt, Yt)
nsim = 100
covres = numeric(nsim)
for(i in 1:nsim){
Yt = rnorm(length(sigma_t), mean = 0, sd = sigma_t)
Yc = -1 + rnorm(length(sigma_c), mean = 0, sd = sigma_c)
chat = c_hat_lower_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc, tau = alpha)
covres[i] = chat < 1
print(i)
}
mean(covres)
nsim = 500
covres = numeric(nsim)
for(i in 1:nsim){
Yt = pmin(bt + C_j * Xt, 0)  rnorm(length(sigma_t), mean = 0, sd = sigma_t)
Yc = -1 + rnorm(length(sigma_c), mean = 0, sd = sigma_c)
chat = c_hat_lower_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc, tau = alpha)
covres[i] = chat < 1
print(i)
}
nsim = 500
covres = numeric(nsim)
for(i in 1:nsim){
Yt = pmin(bt + C_j * Xt, 0)  rnorm(length(sigma_t), mean = 0, sd = sigma_t)
Yc = -1 + rnorm(length(sigma_c), mean = 0, sd = sigma_c)
chat = c_hat_lower_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc, tau = alpha)
covres[i] = chat < 1
print(i)
}
nsim = 500
covres = numeric(nsim)
for(i in 1:nsim){
Yt = pmin(bt + C_j * Xt, 0) + rnorm(length(sigma_t), mean = 0, sd = sigma_t)
Yc = -1 + rnorm(length(sigma_c), mean = 0, sd = sigma_c)
chat = c_hat_lower_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc, tau = alpha)
covres[i] = chat < 1
print(i)
}
mean(covres)
nsim = 5000
covres = numeric(nsim)
for(i in 1:nsim){
Yt = pmin(bt + C_j * Xt, 0) + rnorm(length(sigma_t), mean = 0, sd = sigma_t)
Yc = -1 + rnorm(length(sigma_c), mean = 0, sd = sigma_c)
chat = c_hat_lower_RD(delta = delta, Cj = 1/2, Cbar =1, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t, sigma_c = sigma_c, Yt = Yt, Yc = Yc, tau = alpha)
covres[i] = chat < 1
print(i)
}
mean(covres) # I got 0.942, seems almost correct

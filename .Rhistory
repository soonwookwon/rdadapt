modsol_RD <- function(delta, gam_pair = c(1, 1), C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c,
swap = FALSE){
if (swap) {
gam_pair <- gam_pair[2:1]
C_pair <- C_pair[2:1]
}
maxint <- 100 # An arbitrary large number; doesn't affect the result
minbt <- minb_fun(gam_pair, C_pair, Xt, mon_ind)
minbc <- minb_fun(gam_pair, C_pair, Xc, mon_ind, swap = TRUE)
minb <- minbt + minbc
eqn_fun <- function(b) {
delta_t <- invmod_RD(b, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)$delta_t
delta_c <- invmod_RD(b, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)$delta_c
res <- sqrt(delta_t^2 + delta_c^2) - delta
return(res)
}
solve <- stats::uniroot(eqn_fun, c(minb, maxint), extendInt = "upX",
tol = .Machine$double.eps^10)
bsol <- solve$root
res <- invmod_RD(bsol, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)
return(res)
}
n <- 500
d <- 1
X <- as.matrix(rnorm(n * d), nrow = n, ncol = d)
tind <- X[, 1] > 0
Xt <- X[, tind == 1]
Xc <- X[, tind == 0]
C_pair <- c(0.1, 0.2)
mon_ind <- c(1)
sigma_t <- 1
sigma_c <- 1
Xt <- X[tind == 1, ]
Xc <- X[tind == 0, ]
C_pair <- c(0.1, 0.2)
mon_ind <- c(1)
sigma_t <- 1
sigma_c <- 1
modsol_RD(delta = 1, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
Xt <- X[tind == 1, ,drop = F]
Xc <- X[tind == 0, ,drop = F]
modsol_RD(delta = 1, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
modsol_RD(delta = 1, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
minb_fun(C_pair, Xt, mon_ind)
Xt[, 1]
Vplus(Xt, mon_ind)
Vminus(Xt, mon_ind)
minb_fun(C_pair = C_pair, X = Xt, mon_ind = mon_ind)
minb_fun(C_pair = C_pair, X = Xc, mon_ind = mon_ind, swap = T)
gam_pair <- c(1, 1)
minbt <- minb_fun(C_pair = C_pair, X = Xt, mon_ind = mon_ind)
minbc <- minb_fun(C_pair = C_pair, X = Xc, mon_ind = mon_ind, swap = T)
minb <- minbt + minbc
invmod_RD(minb, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)
deriv_bt <- function(bt) {
bc <- b - bt
om_inv_t_der <- bt * K_fun(bt, gam_pair, C_pair, X, mon_ind) / sigma_t^2
om_inv_t_der <- sum(om_inv_t_der)
om_inv_c_der <- bc * K_fun(bc, gam_pair, C_pair, X, mon_ind, swap = TRUE) / sigma_c^2
om_inv_c_der <- sum(om_inv_c_der)
return(om_inv_t_der - om_inv_c_der)
}
deriv_bt(minbt)
b <- minb
deriv_bt(minbt)
stats::uniroot(deriv_bt, c(minbt, b), tol = .Machine$double.eps^10)
deriv_bt(minb)
b <- minb
bt <- minbt
bc <- minbc
om_inv_t_der <- bt * K_fun(bt, gam_pair, C_pair, X, mon_ind) / sigma_t^2
om_inv_t_der <- sum(om_inv_t_der)
om_inv_c_der <- bc * K_fun(bc, gam_pair, C_pair, X, mon_ind, swap = TRUE) / sigma_c^2
om_inv_c_der <- sum(om_inv_c_der)
om_inv_t_der - om_inv_c_der
deriv_bt(minb)
#' @param C_pair (C, C')
#' @param X A data matrix
#' @param mon_ind index number for monotone variables
#' @param swap Indicator for whether we take (C', C) instead of (C, C')
#'
#' @return A numeric vector with the length equal to nrow(X);
#' if b = 0, returns 0 vector
#' @export
#'
#' @examples
K_fun <- function(b, gam_pair = c(1, 1), C_pair, X, mon_ind, swap = FALSE){
if (swap) {
gam_pair <- gam_pair[2:1]
C_pair <- C_pair[2:1]
}
if(b == 0){
res <- rep(0, nrow(X))
}else{
res <- pos(1 - (C_pair[1] / b) * Norm(Vplus(X, mon_ind))^gam_pair[1] -
(C_pair[2] / b) * Norm(Vminus(X, mon_ind))^gam_pair[2])
}
return(res)
}
n <- 500
d <- 1
X <- as.matrix(rnorm(n * d), nrow = n, ncol = d)
tind <- X[, 1] > 0
Xt <- X[tind == 1, ,drop = F]
Xc <- X[tind == 0, ,drop = F]
gam_pair <- c(1, 1)
C_pair <- c(0.1, 0.2)
mon_ind <- c(1)
sigma_t <- 1
sigma_c <- 1
modsol_RD(delta = 1, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
minbt <- minb_fun(C_pair = C_pair, X = Xt, mon_ind = mon_ind)
minbc <- minb_fun(C_pair = C_pair, X = Xc, mon_ind = mon_ind, swap = T)
minb <- minbt + minbc
invmod_RD(minb, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)
b <- minb
bt <- minbt
bc <- minbc
om_inv_t_der <- bt * K_fun(bt, gam_pair, C_pair, X, mon_ind) / sigma_t^2
om_inv_t_der <- sum(om_inv_t_der)
om_inv_c_der <- bc * K_fun(bc, gam_pair, C_pair, X, mon_ind, swap = TRUE) / sigma_c^2
om_inv_c_der <- sum(om_inv_c_der)
om_inv_t_der - om_inv_c_der
deriv_bt(minb)
deriv_bt(minbt)
deriv_bt(minb)
deriv_bt(minbt)
invmod_RD(minb + 1, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)
invmod_RD(minb + 0.1, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)
invmod_RD(minb + 0.01, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)
invmod_RD(minb + 0.001, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)
b <- minb
bt <- minbt
bc <- minbc
om_inv_t_der <- bt * K_fun(bt, gam_pair, C_pair, X, mon_ind) / sigma_t^2
om_inv_t_der <- sum(om_inv_t_der)
om_inv_c_der <- bc * K_fun(bc, gam_pair, C_pair, X, mon_ind, swap = TRUE) / sigma_c^2
om_inv_c_der <- sum(om_inv_c_der)
n <- 500
d <- 1
X <- as.matrix(rnorm(n * d), nrow = n, ncol = d)
tind <- X[, 1] > 0
Xt <- X[tind == 1, ,drop = F]
Xc <- X[tind == 0, ,drop = F]
gam_pair <- c(1, 1)
C_pair <- c(0.1, 0.2)
mon_ind <- c(1)
sigma_t <- 1
sigma_c <- 1
minbt <- minb_fun(C_pair = C_pair, X = Xt, mon_ind = mon_ind)
minbc <- minb_fun(C_pair = C_pair, X = Xc, mon_ind = mon_ind, swap = T)
minb <- minbt + minbc
b <- minb
bt <- minbt
bc <- minbc
om_inv_t_der <- bt * K_fun(bt, gam_pair, C_pair, X, mon_ind) / sigma_t^2
om_inv_t_der <- sum(om_inv_t_der)
om_inv_c_der <- bc * K_fun(bc, gam_pair, C_pair, X, mon_ind, swap = TRUE) / sigma_c^2
om_inv_c_der <- sum(om_inv_c_der)
om_inv_t_der - om_inv_c_der
deriv_bt(minb)
deriv_bt(minbt)
stats::uniroot(deriv_bt, c(minbt, b), tol = .Machine$double.eps^10)
stats::uniroot(deriv_bt, c(minbt, b+0.00001), tol = .Machine$double.eps^10)
invmod_RD <- function(b, gam_pair = c(1, 1), C_pair, Xt, Xc, mon_ind, sigma_t = 1, sigma_c = 1,
swap = FALSE){
if (swap) {
gam_pair <- gam_pair[2:1]
C_pair <- C_pair[2:1]
}
## Derivative of the square of the minization problem
deriv_bt <- function(bt) {
bc <- b - bt
om_inv_t_der <- bt * K_fun(bt, gam_pair, C_pair, X, mon_ind) / sigma_t^2
om_inv_t_der <- sum(om_inv_t_der)
om_inv_c_der <- bc * K_fun(bc, gam_pair, C_pair, X, mon_ind, swap = TRUE) / sigma_c^2
om_inv_c_der <- sum(om_inv_c_der)
return(om_inv_t_der - om_inv_c_der)
}
minbt <- minb_fun(gam_pair, C_pair, Xt, mon_ind)
minbc <- minb_fun(gam_pair, C_pair, Xc, mon_ind, swap = T)
minb <- minbt + minbc
if(b == minb){
bt <- minbt
}else{
bt_sol <- stats::uniroot(deriv_bt, c(minbt, b), tol = .Machine$double.eps^10)
bt <- bt_sol$root
}
delta_t <- invmod(bt, gam_pair, C_pair, Xt, mon_ind, sigma_t)
delta_c <- invmod(b - bt, gam_pair, C_pair, Xc, mon_ind, sigma_c, swap = TRUE)
res <- list(bt = bt, delta_t = delta_t, bc = b - bt, delta_c = delta_c)
return(res)
}
n <- 500
d <- 1
X <- as.matrix(rnorm(n * d), nrow = n, ncol = d)
tind <- X[, 1] > 0
Xt <- X[tind == 1, ,drop = F]
Xc <- X[tind == 0, ,drop = F]
gam_pair <- c(1, 1)
C_pair <- c(0.1, 0.2)
mon_ind <- c(1)
sigma_t <- 1
sigma_c <- 1
modsol_RD(delta = 1, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
minbt <- minb_fun(C_pair = C_pair, X = Xt, mon_ind = mon_ind)
minbc <- minb_fun(C_pair = C_pair, X = Xc, mon_ind = mon_ind, swap = T)
minb <- minbt + minbc
invmod_RD(minb + 0.001, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)
invmod_RD(minb, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)
modsol_RD(delta = 0.5, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
modsol_RD(delta = 0.001, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
modsol_RD(delta = 0, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
modsol_RD(delta = 0.01, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
modsol_RD(delta = 0.001, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
eqn_fun <- function(b) {
delta_t <- invmod_RD(b, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)$delta_t
delta_c <- invmod_RD(b, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)$delta_c
res <- sqrt(delta_t^2 + delta_c^2) - delta
return(res)
}
eqn_fun(0.002)
minbt <- minb_fun(gam_pair, C_pair, Xt, mon_ind)
minbc <- minb_fun(gam_pair, C_pair, Xc, mon_ind, swap = TRUE)
minb <- minbt + minbc
minb
eqn_fun(0.0022)
deriv_bt(minb)
minbt <- minb_fun(gam_pair, C_pair, Xt, mon_ind)
minbc <- minb_fun(gam_pair, C_pair, Xc, mon_ind, swap = TRUE)
minb <- minbt + minbc
minb
deriv_bt(minb)
deriv_bt(0.0022)
deriv_bt(0.001)
delta = 0.01
minbt <- minb_fun(gam_pair, C_pair, Xt, mon_ind)
minbc <- minb_fun(gam_pair, C_pair, Xc, mon_ind, swap = TRUE)
minb <- minbt + minbc
minb
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
deriv_bt(0.009)
minb
minbt
minb
b <- 0.0022
deriv_bt(minbt)
deriv_bt(b)
invmod_RD <- function(b, gam_pair = c(1, 1), C_pair, Xt, Xc, mon_ind, sigma_t = 1, sigma_c = 1,
swap = FALSE){
if (swap) {
gam_pair <- gam_pair[2:1]
C_pair <- C_pair[2:1]
}
## Derivative of the square of the minization problem
deriv_bt <- function(bt) {
bc <- b - bt
om_inv_t_der <- bt * K_fun(bt, gam_pair, C_pair, X, mon_ind) / sigma_t^2
om_inv_t_der <- sum(om_inv_t_der)
om_inv_c_der <- bc * K_fun(bc, gam_pair, C_pair, X, mon_ind, swap = TRUE) / sigma_c^2
om_inv_c_der <- sum(om_inv_c_der)
return(om_inv_t_der - om_inv_c_der)
}
minbt <- minb_fun(gam_pair, C_pair, Xt, mon_ind)
minbc <- minb_fun(gam_pair, C_pair, Xc, mon_ind, swap = T)
minb <- minbt + minbc
if(b == minb){
bt <- minbt
}else{
bt_sol <- stats::uniroot(deriv_bt, c(minbt, b - minbc), tol = .Machine$double.eps^10)
bt <- bt_sol$root
}
delta_t <- invmod(bt, gam_pair, C_pair, Xt, mon_ind, sigma_t)
delta_c <- invmod(b - bt, gam_pair, C_pair, Xc, mon_ind, sigma_c, swap = TRUE)
res <- list(bt = bt, delta_t = delta_t, bc = b - bt, delta_c = delta_c)
return(res)
}
deriv_bt(b - minbc)
delta = 0.01
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
delta = 0.001
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
eqn_fun(minb)
eqn_fun <- function(b) {
delta_t <- invmod_RD(b, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)$delta_t
delta_c <- invmod_RD(b, gam_pair, C_pair, Xt, Xc, mon_ind, sigma_t, sigma_c)$delta_c
res <- sqrt(delta_t^2 + delta_c^2) - delta
return(res)
}
eqn_fun(minb)
eqn_fun(0.1)
eqn_fun(0.05)
eqn_fun(0.02)
eqn_fun(0.004)
eqn_fun(0.003)
eqn_fun(0.0035)
eqn_fun(0.0032)
eqn_fun(0.0023)
eqn_fun(0.0025)
eqn_fun(0.0027)
eqn_fun(0.0026)
eqn_fun(0.0028)
eqn_fun(0.003)
b <- 0.003
deriv_bt(minbt)
deriv_bt(b - minbc)
b <- 0.0029
deriv_bt(minbt)
deriv_bt(b - minbc)
b <- 0.0027
deriv_bt(minbt)
deriv_bt(b - minbc)
b <- 0.0026
deriv_bt(minbt)
deriv_bt(b - minbc)
b - minbc
minbt
bseq = seq(from = minb, to = b, length.out = 100)
res1 = numeric(100)
res2 = numeric(100)
for(i in 1:100){
res1 = deriv_bt(minbt)
res2 = deriv_bt(bseq[i] - minbc)
}
plot(bseq, res1, type = "l")
lines(bseq, res2)
res1 = numeric(100)
res2 = numeric(100)
for(i in 1:100){
res1[i] = deriv_bt(minbt)
res2[i] = deriv_bt(bseq[i] - minbc)
}
plot(bseq, res1, type = "l")
lines(bseq, res2)
invmod_RD <- function(b, gam_pair = c(1, 1), C_pair, Xt, Xc, mon_ind, sigma_t = 1, sigma_c = 1,
swap = FALSE){
if (swap) {
gam_pair <- gam_pair[2:1]
C_pair <- C_pair[2:1]
}
## Derivative of the square of the minization problem
deriv_bt <- function(bt) {
bc <- b - bt
om_inv_t_der <- bt * K_fun(bt, gam_pair, C_pair, X, mon_ind) / sigma_t^2
om_inv_t_der <- sum(om_inv_t_der)
om_inv_c_der <- bc * K_fun(bc, gam_pair, C_pair, X, mon_ind, swap = TRUE) / sigma_c^2
om_inv_c_der <- sum(om_inv_c_der)
return(om_inv_t_der - om_inv_c_der)
}
minbt <- minb_fun(gam_pair, C_pair, Xt, mon_ind)
minbc <- minb_fun(gam_pair, C_pair, Xc, mon_ind, swap = T)
minb <- minbt + minbc
if(b == minb){
bt <- minbt
}else if(deriv_bt(minbt) * deriv_bt(b - minbc) > 0){
bt <- b - minbc
}else{
bt_sol <- stats::uniroot(deriv_bt, c(minbt, b - minbc), tol = .Machine$double.eps^10)
bt <- bt_sol$root
}
delta_t <- invmod(bt, gam_pair, C_pair, Xt, mon_ind, sigma_t)
delta_c <- invmod(b - bt, gam_pair, C_pair, Xc, mon_ind, sigma_c, swap = TRUE)
res <- list(bt = bt, delta_t = delta_t, bc = b - bt, delta_c = delta_c)
return(res)
}
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
delta = 0.0001
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
delta = 0.01
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = FALSE)
delta = 0.01
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = T)
delta = 0.0001
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = T)
delta = 0.0001
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = NULL,
sigma_t = sigma_t, sigma_c = sigma_c, swap = F)
sigma <- as.matrix(rnorm(n * d)^2, nrow = n, ncol = d)
sigma_t <- sigma[tind == 1, ,drop = F]
sigma_c <- sigma[tind == 0, ,drop = F]
delta = 0.01
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = F)
sigma <- rnorm(n)^2
sigma_t <- sigma[tind == 1]
sigma_c <- sigma[tind == 0]
delta = 0.01
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = F)
warnings()
invmod_RD <- function(b, gam_pair = c(1, 1), C_pair, Xt, Xc, mon_ind, sigma_t = 1, sigma_c = 1,
swap = FALSE){
if (swap) {
gam_pair <- gam_pair[2:1]
C_pair <- C_pair[2:1]
}
## Derivative of the square of the minization problem
deriv_bt <- function(bt) {
bc <- b - bt
om_inv_t_der <- bt * K_fun(bt, gam_pair, C_pair, Xt, mon_ind) / sigma_t^2
om_inv_t_der <- sum(om_inv_t_der)
om_inv_c_der <- bc * K_fun(bc, gam_pair, C_pair, Xc, mon_ind, swap = TRUE) / sigma_c^2
om_inv_c_der <- sum(om_inv_c_der)
return(om_inv_t_der - om_inv_c_der)
}
minbt <- minb_fun(gam_pair, C_pair, Xt, mon_ind)
minbc <- minb_fun(gam_pair, C_pair, Xc, mon_ind, swap = T)
minb <- minbt + minbc
if(b == minb){
bt <- minbt
}else if(deriv_bt(minbt) * deriv_bt(b - minbc) > 0){
bt <- b - minbc
}else{
bt_sol <- stats::uniroot(deriv_bt, c(minbt, b - minbc), tol = .Machine$double.eps^10)
bt <- bt_sol$root
}
delta_t <- invmod(bt, gam_pair, C_pair, Xt, mon_ind, sigma_t)
delta_c <- invmod(b - bt, gam_pair, C_pair, Xc, mon_ind, sigma_c, swap = TRUE)
res <- list(bt = bt, delta_t = delta_t, bc = b - bt, delta_c = delta_c)
return(res)
}
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = F)
delta = 0.0001
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = F)
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = T)
n <- 500
d <- 2
X <- as.matrix(rnorm(n * d), nrow = n, ncol = d)
tind <- X[, 1] > 0 & X[, 2] > 0
Xt <- X[tind == 1, ,drop = F]
Xc <- X[tind == 0, ,drop = F]
gam_pair <- c(1, 1)
C_pair <- c(0.1, 0.2)
mon_ind <- c(1, 2)
sigma_t <- 1
sigma_c <- 1
sigma <- rnorm(n)^2
sigma_t <- sigma[tind == 1]
sigma_c <- sigma[tind == 0]
delta = 0.01
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = T)
n <- 500
d <- 2
X <- as.matrix(rnorm(n * d), nrow = n, ncol = d)
d
n <- 500
d <- 2
X <- matrix(rnorm(n * d), nrow = n, ncol = d)
tind <- X[, 1] > 0 & X[, 2] > 0
Xt <- X[tind == 1, ,drop = F]
Xc <- X[tind == 0, ,drop = F]
gam_pair <- c(1, 1)
C_pair <- c(0.1, 0.2)
mon_ind <- c(1, 2)
sigma_t <- 1
sigma_c <- 1
sigma <- rnorm(n)^2
sigma_t <- sigma[tind == 1]
sigma_c <- sigma[tind == 0]
delta = 0.01
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = T)
delta = 0.001
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = T)
sigma_t <- 1
sigma_c <- 1
delta = 0.001
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = T)
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = F)
delseq = seq(from = 0, to = 1, length.out = 50)
res <- numeric(50)
for(i in 1:50){
res[i] = modsol_RD(delta = delseq[i], C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = F)
}
warnings()
res <- numeric(50)
for(i in 1:50){
modres = modsol_RD(delta = delseq[i], C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = F)
res[i] = modres$bt + modres$bc
}
plot(delseq, res, type = "l")
# For a fixed delta
delta = 10
modsol_RD(delta = delta, C_pair = C_pair, Xt = Xt, Xc = Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c, swap = F)

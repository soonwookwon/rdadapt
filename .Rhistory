om_inv
nlminb(2 * minb, CI_length_RD,
gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha,
lower = minb, upper = Inf)
minb
nlminb(2 * minb, CI_length_RD,
gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha,
lower = minb, upper = Inf)
CI_length_RD(minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(2*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.1*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.00001*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.0001*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.001*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.01*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.05*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.04*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.03*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.02*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.01*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.015*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.014*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.013*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.012*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.011*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.0105*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.0101*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.0102*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.01015*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.01013*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.01011*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.0101*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(1.010105*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
nlminb(2 * minb, CI_length_RD,
gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha,
lower = minb, upper = Inf)
invmod_RD(minb, rep(1,2), rep(C_max,2), Xt, Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c)
minb
CI_minimax_RD(Yt[,ind], Yc[,ind], Xt, Xc, gam_min = 1, C_max = max(C), mon_ind,
sigma_t, sigma_c, alpha = .05)
CI_length_RD(1.010105*minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
nlminb(2 * minb, CI_length_RD,
gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha,
lower = minb, upper = Inf)
minb
gam_min
C_max
mon_ind
nlminb(1.5 * minb, CI_length_RD,
gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha,
lower = minb, upper = Inf)
minb_fun(rep(1,2), rep(C_max,2), Xt, mon_ind)
minb
?nlminb
nlminb(1.5 * minb, CI_length_RD,
gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha, trace = 1,
lower = minb, upper = Inf)
nlminb(1.5 * minb, CI_length_RD,
gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha, control = list(trace = 1),
lower = minb, upper = Inf)
nlminb(2 * minb, CI_length_RD,
gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha, control = list(trace = 1),
lower = minb, upper = Inf)
invmod_RD(0.0257474, rep(1,2), rep(C_max,2), Xt, Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c)
minb
minb_fun(rep(1,2), rep(C_max,2), Xt, mon_ind)
devtools::load_all(".")
minbt <- minb_fun(rep(gam_min,2), rep(C_max,2), Xt, mon_ind, swap = FALSE)
minbc <- minb_fun(rep(gam_min,2), rep(C_max,2), Xc, mon_ind, swap = TRUE)
minb <- minbt + minbc
modsol <- modsol_RD(0, rep(gam_min,2), rep(C_max,2), Xt, Xc, mon_ind, sigma_t, sigma_c,
swap = FALSE)
minb <- modsol$bt + modsol$bc
nlminb(2 * minb, CI_length_RD,
gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha, control = list(trace = 1),
lower = minb, upper = Inf)
invmod_RD(0.0257474, rep(1,2), rep(C_max,2), Xt, Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c)
invmod_RD(0.02, rep(1,2), rep(C_max,2), Xt, Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c)
invmod_RD(0.01, rep(1,2), rep(C_max,2), Xt, Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c)
invmod_RD(0.5, rep(1,2), rep(C_max,2), Xt, Xc, mon_ind = mon_ind,
sigma_t = sigma_t, sigma_c = sigma_c)
CI_length_RD(minb,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(minb*1.1,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
devtools::load_all(".")
minbt <- minb_fun(rep(gam_min,2), rep(C_max,2), Xt, mon_ind, swap = FALSE)
minbc <- minb_fun(rep(gam_min,2), rep(C_max,2), Xc, mon_ind, swap = TRUE)
minb <- minbt + minbc
modsol <- modsol_RD(0, rep(gam_min,2), rep(C_max,2), Xt, Xc, mon_ind, sigma_t, sigma_c,
swap = FALSE)
minb <- modsol$bt + modsol$bc
nlminb(2 * minb, CI_length_RD2,
gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha, control = list(trace = 1),
lower = 0, upper = Inf)
?optimize
optimize(CI_length_RD,c(minb,100*minb),gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
minb
CI_length_RD(0.6470,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
100*minb
nlminb(2 * minb, CI_length_RD,
gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha, control = list(trace = 1),
lower = 0, upper = Inf)
nlminb(2 * minb, CI_length_RD2,
gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha, control = list(trace = 1),
lower = 0, upper = Inf)
minb
?seq
intv = seq(from=minb,to=1,length.out = 100)
len_vec = numeric(100)
intv = seq(from=minb,to=1,length.out = 50)
len_vec = numeric(50)
for(i in 1:50) len_vec[i] = CI_length_RD(intv[i],gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
plot(intv,len_vec,type="l")
intv = seq(from=minb,to=5,length.out = 200)
len_vec = numeric(200)
for(i in 1:200) len_vec[i] = CI_length_RD(intv[i],gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
plot(intv,len_vec,type="l")
intv = seq(from=minb,to=1.1*minb,length.out = 200)
len_vec = numeric(200)
for(i in 1:200) len_vec[i] = CI_length_RD(intv[i],gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
plot(intv,len_vec,type="l")
intv = seq(from=minb,to=2*minb,length.out = 200)
len_vec = numeric(200)
for(i in 1:200) len_vec[i] = CI_length_RD(intv[i],gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
plot(intv,len_vec,type="l")
intv = seq(from=minb,to=5*minb,length.out = 200)
len_vec = numeric(200)
for(i in 1:200) len_vec[i] = CI_length_RD(intv[i],gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
plot(intv,len_vec,type="l")
intv = seq(from=minb,to=3*minb,length.out = 200)
len_vec = numeric(200)
for(i in 1:200) len_vec[i] = CI_length_RD(intv[i],gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
plot(intv,len_vec,type="l")
intv = seq(from=minb,to=4*minb,length.out = 200)
len_vec = numeric(200)
for(i in 1:200) len_vec[i] = CI_length_RD(intv[i],gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
plot(intv,len_vec,type="l")
intv = seq(from=minb,to=5,length.out = 200)
len_vec = numeric(200)
for(i in 1:200) len_vec[i] = CI_length_RD(intv[i],gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
plot(intv,len_vec,type="l")
qnorm(0.5)
modsol_RD(qnorm(0.975), rep(gam_min,2), rep(C_max,2), Xt, Xc, mon_ind, sigma_t, sigma_c,
swap = FALSE)
qnorm(0.975)
optimize(CI_length_RD,c(1,2),gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
optimize(CI_length_RD,c(2,3),gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
CI_length_RD(2,gamma = gam_min, C = C_max, Xt = Xt, Xc = Xc,
mon_ind = mon_ind, sigma_t = sigma_t,
sigma_c = sigma_c, alpha = alpha)
load("MC_result.RData")
?load
load(file = "MC_result.RData")
getdir()
getwd()
devtools::load_all(".")
plot(Xc,fX[!tind,1])
plot(Xc,fX[!tind,3])
C
lines(Xc,0.2*Xc)
devtools::load_all(".")
plot(Xc,fX[!tind,3])
lines(Xc,0.2*Xc)
plot(Xc,fX[!tind,3],type="l")
plot(Xc,fX[!tind,3])
lines(Xc,0.2*Xc)
test = seq(from=1.1,to=10,by=0.05)
test
plot(test,(test-1)*test^(2+1/(test-1)),type="l")
devtools::load_all(".")
sd_t
sd_c
num_trueC
num_grid
J_max
library(rdrobust)
install.packages("rdrobust")
install.packages("xtable)"
)
install.packages("xtable")
library(rdrobust)
library(xtable)
nsim <- 500
sigma_t <- sd_t
sigma_c <- sd_c
MCres = array(0,c(4,5,3,3),dimnames = list(c("len_L","len_U","len","CovProb"),
c("Adpt","mm","RDR","Adpt/mm","Adpt/RDR"),
c("C_ratio:2","C_ratio:5","C_ratio:10"),
c("Error_ratio:1","Error_ratio:2","Error_ratio:5")))
min_trueC <- 0.1
max_trueC_vec <- c(2 * min_trueC, 5 * min_trueC, 10 * min_trueC)
J_max <- 2
for(i1 in 1:3){
max_trueC <- max_trueC_vec[i1]
min_C <- min_trueC
max_C <- max_trueC
C <- gridFun(min_C, max_C, num_grid, J_max, k)$C
trueC <- c(max_C, max_C * 2, max_c * 5) # "true" C in the DGP
truegam <- rep(1, length(trueC))   # "true" gamma = 1
num_trueC <- length(trueC)
fX <- matrix(NA, nrow = n, ncol = num_trueC)
for(j in 1:num_trueC) {
fX[, j] <- apply(X, 1, function(x) truef(truegam[j], trueC[j], kapvec[j], TE)(x))
}
modres = mod_del_cal(rep(1,length(C)), Cvec = C, gam_min = 1, C_max = max(C),
Xt, Xc, mon_ind, sigma_t, sigma_c, alpha = .05/2)
modres_mm <- CI_minimax_RD_mod(Xt, Xc, gam_min = 1, C_max = max(C), mon_ind,
sigma_t, sigma_c, alpha = .05, maxb.const = 10,
Prov.Plot = T)
for(i2 in 1:3){
print(paste("i1=", i1))
print(paste("i2=", i2))
ind <- i2
CIlen_l <- matrix(0,nsim,3)
CIlen_u <- matrix(0,nsim,3)
CovInd <- matrix(0,nsim,3)
for(i in 1:nsim){
for(j in 1:num_trueC) {
Y[, j] <- stats::rnorm(n, mean = fX[, j], sd = sd_vec)
}
Yt <- Y[tind, ]
Yc <- Y[!tind, ]
adpt_res <- CI_gen(Yt[,ind], Yc[,ind], Xt, Xc, C, C_max = max(C), mon_ind,
sigma_t, sigma_c, lower = T, two_sided = T, alpha = 0.05,
modres = modres)
mm_res <- CI_minimax_RD(Yt[,ind], Yc[,ind], Xt, Xc, gam_min = 1, C_max = max(C), mon_ind,
sigma_t, sigma_c, alpha = .05, opt_b = modres_mm$opt_b,
min_half_length = modres_mm$min_half_length,
maxb.const = 10, Prov.Plot = F)
RDR_res <- rdrobust(Y[,ind],X)$ci
RDR_res <- -RDR_res[3,2:1]
CIlen_l[i, 1] <- 1 - adpt_res$CI_l
CIlen_l[i, 2] <- 1 - mm_res[1]
CIlen_l[i, 3] <- 1 - RDR_res[1]
CIlen_u[i, 1] <- adpt_res$CI_u - 1
CIlen_u[i, 2] <- mm_res[2] - 1
CIlen_u[i, 3] <- RDR_res[2] - 1
CovInd[i, 1] <- (adpt_res$CI_l < 1) * (adpt_res$CI_u > 1)
CovInd[i, 2] <- (mm_res[1] < 1) * (mm_res[2] > 1)
CovInd[i, 3] <- (RDR_res[1] < 1) * (RDR_res[2] > 1)
print(i)
}
MCres[1,1:3,i1,i2] <- colSums(CIlen_l) / nsim
MCres[2,1:3,i1,i2] <- colSums(CIlen_u) / nsim
MCres[3,,i1,i2] <-  MCres[1,,i1,i2] + MCres[2,,i1,i2]
MCres[4,1:3,i1,i2] <- colSums(CovInd) / nsim
MCres[1:3,4,i1,i2] <- MCres[1:3,1,i1,i2] / MCres[1:3,2,i1,i2]
MCres[1:3,5,i1,i2] <- MCres[1:3,1,i1,i2] / MCres[1:3,3,i1,i2]
}
}
for(i1 in 1:3){
max_trueC <- max_trueC_vec[i1]
min_C <- min_trueC
max_C <- max_trueC
C <- gridFun(min_C, max_C, num_grid, J_max, k)$C
trueC <- c(max_C, max_C * 2, max_C * 5) # "true" C in the DGP
truegam <- rep(1, length(trueC))   # "true" gamma = 1
num_trueC <- length(trueC)
fX <- matrix(NA, nrow = n, ncol = num_trueC)
for(j in 1:num_trueC) {
fX[, j] <- apply(X, 1, function(x) truef(truegam[j], trueC[j], kapvec[j], TE)(x))
}
modres = mod_del_cal(rep(1,length(C)), Cvec = C, gam_min = 1, C_max = max(C),
Xt, Xc, mon_ind, sigma_t, sigma_c, alpha = .05/2)
modres_mm <- CI_minimax_RD_mod(Xt, Xc, gam_min = 1, C_max = max(C), mon_ind,
sigma_t, sigma_c, alpha = .05, maxb.const = 10,
Prov.Plot = T)
for(i2 in 1:3){
print(paste("i1=", i1))
print(paste("i2=", i2))
ind <- i2
CIlen_l <- matrix(0,nsim,3)
CIlen_u <- matrix(0,nsim,3)
CovInd <- matrix(0,nsim,3)
for(i in 1:nsim){
for(j in 1:num_trueC) {
Y[, j] <- stats::rnorm(n, mean = fX[, j], sd = sd_vec)
}
Yt <- Y[tind, ]
Yc <- Y[!tind, ]
adpt_res <- CI_gen(Yt[,ind], Yc[,ind], Xt, Xc, C, C_max = max(C), mon_ind,
sigma_t, sigma_c, lower = T, two_sided = T, alpha = 0.05,
modres = modres)
mm_res <- CI_minimax_RD(Yt[,ind], Yc[,ind], Xt, Xc, gam_min = 1, C_max = max(C), mon_ind,
sigma_t, sigma_c, alpha = .05, opt_b = modres_mm$opt_b,
min_half_length = modres_mm$min_half_length,
maxb.const = 10, Prov.Plot = F)
RDR_res <- rdrobust(Y[,ind],X)$ci
RDR_res <- -RDR_res[3,2:1]
CIlen_l[i, 1] <- 1 - adpt_res$CI_l
CIlen_l[i, 2] <- 1 - mm_res[1]
CIlen_l[i, 3] <- 1 - RDR_res[1]
CIlen_u[i, 1] <- adpt_res$CI_u - 1
CIlen_u[i, 2] <- mm_res[2] - 1
CIlen_u[i, 3] <- RDR_res[2] - 1
CovInd[i, 1] <- (adpt_res$CI_l < 1) * (adpt_res$CI_u > 1)
CovInd[i, 2] <- (mm_res[1] < 1) * (mm_res[2] > 1)
CovInd[i, 3] <- (RDR_res[1] < 1) * (RDR_res[2] > 1)
print(i)
}
MCres[1,1:3,i1,i2] <- colSums(CIlen_l) / nsim
MCres[2,1:3,i1,i2] <- colSums(CIlen_u) / nsim
MCres[3,,i1,i2] <-  MCres[1,,i1,i2] + MCres[2,,i1,i2]
MCres[4,1:3,i1,i2] <- colSums(CovInd) / nsim
MCres[1:3,4,i1,i2] <- MCres[1:3,1,i1,i2] / MCres[1:3,2,i1,i2]
MCres[1:3,5,i1,i2] <- MCres[1:3,1,i1,i2] / MCres[1:3,3,i1,i2]
}
}
MCres
rm(list = ls())
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(rdrobust)
library(xtable)
nsim <- 500
sigma_t <- sd_t
sigma_c <- sd_c
MCres = array(0,c(4,5,3,3),dimnames = list(c("len_L","len_U","len","CovProb"),
c("Adpt","mm","RDR","Adpt/mm","Adpt/RDR"),
c("C_ratio:2","C_ratio:5","C_ratio:10"),
c("Error_ratio:1","Error_ratio:2","Error_ratio:5")))
min_trueC <- 0.1
max_trueC_vec <- c(2 * min_trueC, 5 * min_trueC, 10 * min_trueC)
J_max <- 2
for(i1 in 1:3){
max_trueC <- max_trueC_vec[i1]
min_C <- min_trueC
max_C <- max_trueC
C <- gridFun(min_C, max_C, num_grid, J_max, k)$C
trueC <- c(max_C, max_C * 2, max_C * 5) # "true" C in the DGP
truegam <- rep(1, length(trueC))   # "true" gamma = 1
num_trueC <- length(trueC)
fX <- matrix(NA, nrow = n, ncol = num_trueC)
for(j in 1:num_trueC) {
fX[, j] <- apply(X, 1, function(x) truef(truegam[j], trueC[j], kapvec[j], TE)(x))
}
modres = mod_del_cal(rep(1,length(C)), Cvec = C, gam_min = 1, C_max = max(C),
Xt, Xc, mon_ind, sigma_t, sigma_c, alpha = .05/2)
modres_mm <- CI_minimax_RD_mod(Xt, Xc, gam_min = 1, C_max = max(C), mon_ind,
sigma_t, sigma_c, alpha = .05, maxb.const = 10,
Prov.Plot = T)
for(i2 in 1:3){
print(paste("i1=", i1))
print(paste("i2=", i2))
ind <- i2
CIlen_l <- matrix(0,nsim,3)
CIlen_u <- matrix(0,nsim,3)
CovInd <- matrix(0,nsim,3)
for(i in 1:nsim){
for(j in 1:num_trueC) {
Y[, j] <- stats::rnorm(n, mean = fX[, j], sd = sd_vec)
}
Yt <- Y[tind, ]
Yc <- Y[!tind, ]
adpt_res <- CI_gen(Yt[,ind], Yc[,ind], Xt, Xc, C, C_max = max(C), mon_ind,
sigma_t, sigma_c, lower = T, two_sided = T, alpha = 0.05,
modres = modres)
mm_res <- CI_minimax_RD(Yt[,ind], Yc[,ind], Xt, Xc, gam_min = 1, C_max = max(C), mon_ind,
sigma_t, sigma_c, alpha = .05, opt_b = modres_mm$opt_b,
min_half_length = modres_mm$min_half_length,
maxb.const = 10, Prov.Plot = F)
RDR_res <- rdrobust(Y[,ind],X)$ci
RDR_res <- -RDR_res[3,2:1]
CIlen_l[i, 1] <- 1 - adpt_res$CI_l
CIlen_l[i, 2] <- 1 - mm_res[1]
CIlen_l[i, 3] <- 1 - RDR_res[1]
CIlen_u[i, 1] <- adpt_res$CI_u - 1
CIlen_u[i, 2] <- mm_res[2] - 1
CIlen_u[i, 3] <- RDR_res[2] - 1
CovInd[i, 1] <- (adpt_res$CI_l < 1) * (adpt_res$CI_u > 1)
CovInd[i, 2] <- (mm_res[1] < 1) * (mm_res[2] > 1)
CovInd[i, 3] <- (RDR_res[1] < 1) * (RDR_res[2] > 1)
print(i)
}
MCres[1,1:3,i1,i2] <- colSums(CIlen_l) / nsim
MCres[2,1:3,i1,i2] <- colSums(CIlen_u) / nsim
MCres[3,,i1,i2] <-  MCres[1,,i1,i2] + MCres[2,,i1,i2]
MCres[4,1:3,i1,i2] <- colSums(CovInd) / nsim
MCres[1:3,4,i1,i2] <- MCres[1:3,1,i1,i2] / MCres[1:3,2,i1,i2]
MCres[1:3,5,i1,i2] <- MCres[1:3,1,i1,i2] / MCres[1:3,3,i1,i2]
}
}
MCres
MCres
date = as.character(Sys.Date())
filename = paste("MC_result_",date,sep="")
marker = "(WrongC)"
for(dim1 in 1:3){
for(dim2 in 4:5){
tab_title <- paste(dimnames(MCres)[[1]][dim1], dimnames(MCres)[[2]][dim2],
marker)
res <- xtable(MCres[dim1, dim2, , ], digits = 3, caption = tab_title)
print(res, file = paste(filename,".tex",sep=""), append = T)
}
}
for(dim2 in 1:3){
tab_title <- paste("Coverage probability for", dimnames(MCres)[[2]][dim2],
marker)
res <- xtable(MCres[4, dim2, , ], digits = 3, caption = tab_title)
print(res, file = paste(filename,".tex",sep=""), append = T)
}
save(MCres,sd_t,sd_c,min_trueC,max_trueC_vec,n,Cpr,C,alpha,k,mon_ind,nsim,
file = paste(filename,".RData",sep=""))
